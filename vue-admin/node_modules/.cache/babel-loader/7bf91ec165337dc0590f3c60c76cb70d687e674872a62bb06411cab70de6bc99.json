{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport ElementUI from 'element-ui';\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: 'http://localhost:8082',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n});\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\n  if (user) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  // 权限验证不通过给出提示\n  if (res.code === '401') {\n    ElementUI.Message({\n      message: res.msg,\n      type: \"error\"\n    });\n    router.push('/401');\n    // router.push('/login?returnUrl= '+ encodeURIComponent(router.currentRoute.fullPath))\n  }\n\n  return res;\n}, error => {\n  ElementUI.Message({\n    message: '网络异常，请稍后再试!',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  // router.push('/login?returnUrl= '+ encodeURIComponent(router.currentRoute.fullPath))\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","ElementUI","router","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","Message","message","msg","type","push","duration"],"sources":["F:/项目/SpringBoot+Vue/admin/vue-admin/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport ElementUI from 'element-ui'\r\nimport router from \"@/router\";\r\n\r\nconst request = axios.create({\r\n    baseURL: 'http://localhost:8082',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    timeout: 5000,\r\n})\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    let user =localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\r\n    if(user){\r\n        config.headers['token'] = user.token;  // 设置请求头\r\n    }\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        // 权限验证不通过给出提示\r\n        if(res.code === '401'){\r\n            ElementUI.Message({\r\n                message: res.msg,\r\n                type: \"error\"\r\n            })\r\n            router.push('/401');\r\n            // router.push('/login?returnUrl= '+ encodeURIComponent(router.currentRoute.fullPath))\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        ElementUI.Message({\r\n            message: '网络异常，请稍后再试!',\r\n            type: 'error',\r\n            duration: 5 * 1000,\r\n        })\r\n        // router.push('/login?returnUrl= '+ encodeURIComponent(router.currentRoute.fullPath))\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAE,uBAAuB;EAAG;EACnCC,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE,IAAIC,IAAI,GAAEC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI;EACxF,IAAGF,IAAI,EAAC;IACJF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACK,KAAK,CAAC,CAAE;EAC3C;;EACA,OAAOP,MAAM;AACjB,CAAC,EAAEQ,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAd,OAAO,CAACI,YAAY,CAACa,QAAQ,CAACZ,GAAG,CAC7BY,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAIF,QAAQ,CAACX,MAAM,CAACc,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAK,CAACM,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA;EACA,IAAGA,GAAG,CAACG,IAAI,KAAK,KAAK,EAAC;IAClBvB,SAAS,CAACwB,OAAO,CAAC;MACdC,OAAO,EAAEL,GAAG,CAACM,GAAG;MAChBC,IAAI,EAAE;IACV,CAAC,CAAC;IACF1B,MAAM,CAAC2B,IAAI,CAAC,MAAM,CAAC;IACnB;EACJ;;EACA,OAAOR,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLhB,SAAS,CAACwB,OAAO,CAAC;IACdC,OAAO,EAAE,aAAa;IACtBE,IAAI,EAAE,OAAO;IACbE,QAAQ,EAAE,CAAC,GAAG;EAClB,CAAC,CAAC;EACF;EACA,OAAOZ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CACJ;AAGD,eAAed,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}